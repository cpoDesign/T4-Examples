<#@ template hostspecific="True" #>
<#@include file="MultipleOutputHelper.ttinclude" #>
<#@ import namespace="System.Linq" #>

<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<# manager.StartHeader(); #>
// Code generated by a template
using System;

namespace Tests
{
<# manager.EndBlock(); #>

<#  
	// define constants to generat
	List<KeyValuePair<string, string>> items = new List<KeyValuePair<string, string>>();
		items.Add(new KeyValuePair<string,string>("File1", "Method1"));
		items.Add(new KeyValuePair<string,string>("File1", "Method2"));
		items.Add(new KeyValuePair<string,string>("File2", "Method1"));
		items.Add(new KeyValuePair<string,string>("File2", "Method2"));

foreach (var key in items.Select(x => x.Key).Distinct())
{
      manager.StartNewFile(String.Format("{0}.cs", key)); 
	  #>
      public class <#=key#>
      {
<#
foreach (var value in items.Where(x=>x.Key == key))
{
#>
		  public void <#=value.Value#>(){
		  				 
		  }
<#
}
#>
	  }
<#     
      manager.EndBlock();
   }
#>

<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>
